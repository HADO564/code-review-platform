// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.
package model

import (
    "time"
)

type Mutation struct {
}

type Query struct {
}

type User struct {
    ID        string    `json:"id"`
    Username  string    `json:"username"`
    Email     string    `json:"email"`
    CreatedAt time.Time `json:"createdAt"`
    UpdatedAt time.Time `json:"updatedAt"`
    Projects  []*Project `json:"projects"`
    Reviews   []*Review  `json:"reviews"`
}

type Project struct {
    ID            string    `json:"id"`
    Name          string    `json:"name"`
    Description   *string   `json:"description"`
    Owner         *User     `json:"owner"`
    CodeSnippets  []*CodeSnippet `json:"codeSnippets"`
    Collaborators []*ProjectCollaborator `json:"collaborators"`
    CreatedAt     time.Time `json:"createdAt"`
    UpdatedAt     time.Time `json:"updatedAt"`
}

type CodeSnippet struct {
    ID        string    `json:"id"`
    Project   *Project  `json:"project"`
    Title     string    `json:"title"`
    Content   string    `json:"content"`
    Language  string    `json:"language"`
    Version   int       `json:"version"`
    CreatedBy *User     `json:"createdBy"`
    Reviews   []*Review `json:"reviews"`
    CreatedAt time.Time `json:"createdAt"`
    UpdatedAt time.Time `json:"updatedAt"`
}

type Review struct {
    ID        string    `json:"id"`
    Snippet   *CodeSnippet `json:"snippet"`
    Reviewer  *User     `json:"reviewer"`
    Status    ReviewStatus `json:"status"`
    Comments  []*Comment `json:"comments"`
    CreatedAt time.Time `json:"createdAt"`
    UpdatedAt time.Time `json:"updatedAt"`
}

type Comment struct {
    ID         string    `json:"id"`
    Review     *Review   `json:"review"`
    User       *User     `json:"user"`
    Content    string    `json:"content"`
    LineNumber *int      `json:"lineNumber"`
    CreatedAt  time.Time `json:"createdAt"`
    UpdatedAt  time.Time `json:"updatedAt"`
}

type ProjectCollaborator struct {
    Project *Project `json:"project"`
    User    *User    `json:"user"`
    Role    CollaboratorRole `json:"role"`
}

type ReviewStatus string

const (
    ReviewStatusPending  ReviewStatus = "PENDING"
    ReviewStatusApproved ReviewStatus = "APPROVED"
    ReviewStatusRejected ReviewStatus = "REJECTED"
)

type CollaboratorRole string

const (
    CollaboratorRoleOwner      CollaboratorRole = "OWNER"
    CollaboratorRoleContributor CollaboratorRole = "CONTRIBUTOR"
    CollaboratorRoleViewer     CollaboratorRole = "VIEWER"
)

type NewUser struct {
    Username string `json:"username"`
    Email    string `json:"email"`
    Password string `json:"password"`
}

type NewProject struct {
    Name        string `json:"name"`
    Description *string `json:"description"`
    OwnerID     string `json:"ownerId"`
}

type NewCodeSnippet struct {
    ProjectID string `json:"projectId"`
    Title     string `json:"title"`
    Content   string `json:"content"`
    Language  string `json:"language"`
    CreatedByID string `json:"createdById"`
}

type NewReview struct {
    SnippetID  string `json:"snippetId"`
    ReviewerID string `json:"reviewerId"`
}

type NewComment struct {
    ReviewID   string `json:"reviewId"`
    UserID     string `json:"userId"`
    Content    string `json:"content"`
    LineNumber *int   `json:"lineNumber"`
}

type NewProjectCollaborator struct {
    ProjectID string `json:"projectId"`
    UserID    string `json:"userId"`
    Role      CollaboratorRole `json:"role"`
}